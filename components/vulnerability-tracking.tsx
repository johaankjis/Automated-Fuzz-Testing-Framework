"use client"

import { useState } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Shield, AlertTriangle, CheckCircle2, Clock, FileText, ExternalLink } from "lucide-react"
import { VulnerabilityDetails } from "@/components/vulnerability-details"

const vulnerabilities = [
  {
    id: "VULN-001",
    type: "Buffer Overflow",
    cwe: "CWE-120",
    severity: "critical",
    module: "json_parser.c",
    line: 247,
    function: "parse_string()",
    status: "remediated",
    discoveredBy: "json_parser_fuzzer",
    sanitizer: "ASan",
    discoveredDate: "2024-01-15",
    remediatedDate: "2024-01-16",
    description: "Heap buffer overflow when parsing strings longer than allocated buffer size",
    impact: "Potential remote code execution through malformed JSON input",
    fix: "Added bounds checking and dynamic buffer reallocation",
    testCase: "crash-da39a3ee5e6b4b0d3255bfef95601890afd80709",
  },
  {
    id: "VULN-002",
    type: "Use After Free",
    cwe: "CWE-416",
    severity: "high",
    module: "xml_parser.c",
    line: 189,
    function: "free_node()",
    status: "remediated",
    discoveredBy: "xml_parser_fuzzer",
    sanitizer: "ASan",
    discoveredDate: "2024-01-18",
    remediatedDate: "2024-01-19",
    description: "Memory accessed after being freed during XML node cleanup",
    impact: "Potential information disclosure or denial of service",
    fix: "Implemented proper reference counting for node lifecycle",
    testCase: "crash-356a192b7913b04c54574d18c28d46e6395428ab",
  },
  {
    id: "VULN-003",
    type: "Buffer Overflow",
    cwe: "CWE-120",
    severity: "critical",
    module: "http_parser.c",
    line: 312,
    function: "parse_header()",
    status: "remediated",
    discoveredBy: "http_header_fuzzer",
    sanitizer: "ASan",
    discoveredDate: "2024-01-22",
    remediatedDate: "2024-01-23",
    description: "Stack buffer overflow when processing HTTP headers exceeding buffer capacity",
    impact: "Remote code execution via crafted HTTP requests",
    fix: "Replaced fixed-size buffer with dynamic allocation and size validation",
    testCase: "crash-da4b9237bacccdf19c0760cab7aec4a8359010b0",
  },
  {
    id: "VULN-004",
    type: "Integer Overflow",
    cwe: "CWE-190",
    severity: "medium",
    module: "base64.c",
    line: 78,
    function: "decode_base64()",
    status: "in-review",
    discoveredBy: "base64_decoder_fuzzer",
    sanitizer: "UBSan",
    discoveredDate: "2024-01-25",
    remediatedDate: null,
    description: "Integer overflow in size calculation leading to undersized buffer allocation",
    impact: "Potential heap corruption with specially crafted base64 input",
    fix: "Under review - proposed safe integer arithmetic with overflow checks",
    testCase: "crash-77de68daecd823babbb58edb1c8e14d7106e83bb",
  },
  {
    id: "VULN-005",
    type: "Null Pointer Dereference",
    cwe: "CWE-476",
    severity: "medium",
    module: "regex.c",
    line: 445,
    function: "match_pattern()",
    status: "open",
    discoveredBy: "regex_engine_fuzzer",
    sanitizer: "UBSan",
    discoveredDate: "2024-01-28",
    remediatedDate: null,
    description: "Null pointer dereference when processing malformed regex patterns",
    impact: "Denial of service through application crash",
    fix: "Not yet assigned",
    testCase: "crash-1b6453892473a467d07372d45eb05abc2031647a",
  },
]

const stats = {
  total: vulnerabilities.length,
  critical: vulnerabilities.filter((v) => v.severity === "critical").length,
  remediated: vulnerabilities.filter((v) => v.status === "remediated").length,
  open: vulnerabilities.filter((v) => v.status === "open").length,
}

export function VulnerabilityTracking() {
  const [selectedVuln, setSelectedVuln] = useState<string | null>(null)
  const [filter, setFilter] = useState<"all" | "critical" | "high" | "medium">("all")
  const [statusFilter, setStatusFilter] = useState<"all" | "open" | "in-review" | "remediated">("all")

  const filteredVulns = vulnerabilities.filter((v) => {
    const severityMatch = filter === "all" || v.severity === filter
    const statusMatch = statusFilter === "all" || v.status === statusFilter
    return severityMatch && statusMatch
  })

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight text-balance">Vulnerability Tracking</h1>
          <p className="mt-2 text-muted-foreground">Memory safety issues detected by fuzzing and sanitizers</p>
        </div>
        <Button variant="outline" className="gap-2 bg-transparent">
          <ExternalLink className="h-4 w-4" />
          Export Report
        </Button>
      </div>

      <div className="grid gap-4 md:grid-cols-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Total Found</p>
              <p className="mt-1 text-2xl font-bold">{stats.total}</p>
            </div>
            <Shield className="h-8 w-8 text-chart-1" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Critical</p>
              <p className="mt-1 text-2xl font-bold">{stats.critical}</p>
            </div>
            <AlertTriangle className="h-8 w-8 text-destructive" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Remediated</p>
              <p className="mt-1 text-2xl font-bold">{stats.remediated}</p>
            </div>
            <CheckCircle2 className="h-8 w-8 text-chart-2" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Open</p>
              <p className="mt-1 text-2xl font-bold">{stats.open}</p>
            </div>
            <Clock className="h-8 w-8 text-accent" />
          </div>
        </Card>
      </div>

      <Card className="p-6">
        <div className="mb-4 flex flex-wrap items-center gap-4">
          <div className="flex gap-2">
            <span className="text-sm font-medium text-muted-foreground">Severity:</span>
            <Button variant={filter === "all" ? "default" : "outline"} size="sm" onClick={() => setFilter("all")}>
              All
            </Button>
            <Button
              variant={filter === "critical" ? "default" : "outline"}
              size="sm"
              onClick={() => setFilter("critical")}
            >
              Critical
            </Button>
            <Button variant={filter === "high" ? "default" : "outline"} size="sm" onClick={() => setFilter("high")}>
              High
            </Button>
            <Button variant={filter === "medium" ? "default" : "outline"} size="sm" onClick={() => setFilter("medium")}>
              Medium
            </Button>
          </div>
          <div className="flex gap-2">
            <span className="text-sm font-medium text-muted-foreground">Status:</span>
            <Button
              variant={statusFilter === "all" ? "default" : "outline"}
              size="sm"
              onClick={() => setStatusFilter("all")}
            >
              All
            </Button>
            <Button
              variant={statusFilter === "open" ? "default" : "outline"}
              size="sm"
              onClick={() => setStatusFilter("open")}
            >
              Open
            </Button>
            <Button
              variant={statusFilter === "in-review" ? "default" : "outline"}
              size="sm"
              onClick={() => setStatusFilter("in-review")}
            >
              In Review
            </Button>
            <Button
              variant={statusFilter === "remediated" ? "default" : "outline"}
              size="sm"
              onClick={() => setStatusFilter("remediated")}
            >
              Remediated
            </Button>
          </div>
        </div>

        <div className="space-y-3">
          {filteredVulns.map((vuln) => (
            <div
              key={vuln.id}
              className="cursor-pointer rounded-lg border border-border p-4 transition-colors hover:bg-muted/50"
              onClick={() => setSelectedVuln(vuln.id)}
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-4">
                  <div
                    className={`mt-1 flex h-10 w-10 items-center justify-center rounded-lg ${
                      vuln.severity === "critical"
                        ? "bg-destructive/10"
                        : vuln.severity === "high"
                          ? "bg-accent/10"
                          : "bg-chart-3/10"
                    }`}
                  >
                    <Shield
                      className={`h-5 w-5 ${
                        vuln.severity === "critical"
                          ? "text-destructive"
                          : vuln.severity === "high"
                            ? "text-accent"
                            : "text-chart-3"
                      }`}
                    />
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="font-mono text-sm font-medium">{vuln.id}</span>
                      <Badge variant="outline" className="font-mono text-xs">
                        {vuln.cwe}
                      </Badge>
                      <Badge
                        variant={
                          vuln.severity === "critical"
                            ? "destructive"
                            : vuln.severity === "high"
                              ? "default"
                              : "secondary"
                        }
                        className={
                          vuln.severity === "critical"
                            ? ""
                            : vuln.severity === "high"
                              ? "bg-accent/10 text-accent"
                              : "bg-chart-3/10 text-chart-3"
                        }
                      >
                        {vuln.severity}
                      </Badge>
                      <Badge
                        variant={vuln.status === "remediated" ? "default" : "outline"}
                        className={
                          vuln.status === "remediated"
                            ? "bg-chart-2/10 text-chart-2"
                            : vuln.status === "in-review"
                              ? "bg-chart-1/10 text-chart-1"
                              : ""
                        }
                      >
                        {vuln.status}
                      </Badge>
                    </div>
                    <p className="text-sm font-medium">{vuln.type}</p>
                    <p className="text-sm text-muted-foreground">{vuln.description}</p>
                    <div className="flex items-center gap-3 text-xs text-muted-foreground">
                      <span className="font-mono">
                        {vuln.module}:{vuln.line}
                      </span>
                      <span>•</span>
                      <span className="font-mono">{vuln.function}</span>
                      <span>•</span>
                      <span>Discovered by {vuln.discoveredBy}</span>
                      <span>•</span>
                      <span className="rounded bg-primary/10 px-1.5 py-0.5 font-medium text-primary">
                        {vuln.sanitizer}
                      </span>
                    </div>
                  </div>
                </div>
                <Button variant="ghost" size="sm">
                  <FileText className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      </Card>

      {selectedVuln && (
        <VulnerabilityDetails
          vulnerability={vulnerabilities.find((v) => v.id === selectedVuln)!}
          onClose={() => setSelectedVuln(null)}
        />
      )}
    </div>
  )
}
